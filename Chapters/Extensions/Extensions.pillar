!!Extending the Pharo debugger
The debugger is extendable with user-defined problem-specific debugging tools.
Both views and debugging model can be tweaked to become applicable to a user's problem.
Views are extendable through the moldability of the Spec framework.
The Pharo debugging model is accessible through the Sindarin debugging API, with which users write debugging scripts and extend debugging actions.

Different aspects of the debugger are extendable: the toolbar, contexts menus (stack, code editor and context inspector) and the right column.

!!!The debugger tools extensions
The right column extends the debugger with additional tools.
These tools have access to the debugging model features and state through the Sindarin API (Chapter **Sindarin**).
They use this API to provide customized, problem-specific actions and views of the debugged execution.

++SCREENSHOT HERE++

!!!!Implementing a debugger extension
Those tools are spec presenters (subclasses of ==SpPresenter==) with, if needed, a dedicated model.
They must implement methods and state to be considered as valid extensions.

To do so, the debugger enumerates its extensions and calls the ==updatePresenter== method.
This method is implemented by ==SpPresenter== and must be reimplemented by all tools.

extendedDebuggingToolTitle ==> convention method name to retrieve the name of a tool
	<debuggerExtensionPresentationOrder> ==> pragma to declare the tool
	^ 'Sindarin' ==> Returns string naming a tool

That name is used in the settings and in the

Must implement a setting that defines the order of appearance of the tool view in the right column of the debugger.

++EXAMPLE HERE++


!!!!Interaction between a tool extension and the extended debugger

Tools extensions are instantiated and registered by the debugger.
When the debugger is updated, e.g. while a single step has been performed, all registered tools are notified of that update.

Tools extensions also hold a reference to the debugger so that they may perform actions with it, e.g. trigger an update.
When a specific tool updates the debugger, the debugger also notifies all registered extensions.

Tools might have to turn the debugger updating service off while they act on the current debug session to avoid systematic refresh of the debugger view while they work.
Give the example of debugging scripts.


!!!Context menus and toolbar extensions

Context menus and toolbar extensions are either standalone (they perform a user-defined action or debugging script) or associated to a tool extending the debugger.

!!!!Standalone: Sindarin script or custom user-defined action
!!!!Tool-related extension

Extensions are collected through pragmas
The debugger toolbar is extendable by developing a command class with the <debuggerToolbarExtension>
The debugger inspector context menu is extendable by developing a command class with the <debuggerToolbarExtension>
